name: Trivy Dependency Scan

on:
  push:
    branches: [ "master" ] # Thay 'master' bằng 'main' nếu cần
  pull_request:

jobs:
  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest

    # Thêm các quyền cần thiết
    permissions:
      contents: read      # Để checkout code
      security-events: write # Để tải kết quả SARIF lên tab Security

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Chạy Trivy để quét các phần phụ thuộc
      - name: Run Trivy vulnerability scanner on filesystem
        uses: aquasecurity/trivy-action@0.33.0 # Nên sử dụng phiên bản cụ thể
        with:
          # Loại quét: quét hệ thống tệp để tìm các tệp lock
          scan-type: 'fs'
          format: 'table'
          # Chỉ báo lỗi cho các lỗ hổng từ mức HIGH trở lên
          severity: 'HIGH,CRITICAL'
          # Không làm workflow thất bại để có thể tải báo cáo lên
          exit-code: '0'
          trivy-flags: '--skip-version-check'
        
      - name: Generate SARIF report for GitHub Security tab
        run: |
          # Lệnh trivy fs [đường dẫn] --format sarif --output [tên tệp]
          trivy fs . --format sarif --output trivy-results.sarif --severity HIGH,CRITICAL
        # Bật continue-on-error ở đây để nếu lệnh này có lỗi, bước upload vẫn chạy
        continue-on-error: true

      # Tải tệp SARIF lên GitHub Code Scanning
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        # if: always() đảm bảo bước này luôn chạy, ngay cả khi bước trivy có exit-code khác 0
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
