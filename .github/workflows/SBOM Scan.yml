name: SBOM and Image Security Scan

on:
  push:
    branches: [ "master" ]
  pull_request:

jobs:
  sast-with-sonarqube:
    name: SAST Sonarqube Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run SonarQube to Scan vulnerabilities 
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          continue-on-erro: true

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 10
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
  sca-with-snyk:
    name: SCA Synk Scan
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      security-events: write
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install Dependancy
        run: npm ci --legacy-peer-deps
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env: 
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with: 
          command: test
          args: --sarif-file-output=snyk.sarif
        
      - name: Upload result to Github Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: success()
        with:
          sarif_file: snyk.sarif


  build-and-push:
    name: Build image, generate SBOM and push 
    # QUAN TRỌNG: Vì bạn đang chạy Docker và cài đặt công cụ, self-hosted runner là lựa chọn đúng.4
    needs: [sast-with-sonarqube, sca-with-snyk]
    runs-on: self-hosted

    permissions:
      contents: read
      packages: write 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate SBOM with Syft
        # Sử dụng action chính thức để tránh phải cài đặt thủ công và quản lý phiên bản
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: "sbom.json"

      - name: Build and push Docker image to Docker Hub
        id: build_push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/juice-shop:${{ github.sha }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
      
      - name: Upload SBOM Artifact 
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.json

  scan-sbom-grype:
    name: Scan Sbom Grype
    runs-on: self-hosted
    needs: build-and-push
    
    steps:
      - name: Download SBOM Artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom-${{ github.sha }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Grype vulnerability scanner on sbom
    # Sử dụng action chính thức của Grype
        uses: anchore/scan-action@v6
        continue-on-error: true
        with:
          sbom: "sbom.json"
          output-format: table
          

  scan-image-with-trivy:
    name: Scan image with Trivy 
    runs-on: self-hosted 
    needs: build-and-push 
    permissions:
      security-events: write
      packages: read

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

        # Sử dụng action chính thức của Trivy
      - name: Scan vulnerability scanner on image 
        uses: aquasecurity/trivy-action@0.33.0
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/juice-shop:${{ github.sha }}'
          format: 'table' # In ra bảng đẹp trong log
          exit-code: '0' # Làm workflow thất bại nếu có lỗi
          trivy-flags: '--skip-version-check'
          severity: 'HIGH,CRITICAL'